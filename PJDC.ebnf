
# Begin
<Translation_Unit> ::= {<Function_Definition> | <GlobalVariable_Definition> | <GlobalArray_Definition>}CODE_EOF



# Definition, Declaration
<Type> ::= VOID | CHAR | INT | LONG
<Function_Definition> ::= <Type>["*"] IDENTIFIER "(" [<Parameter_List>] ")" <Compound_Statement>
<Parameter_List> ::= <LocalVariable_Declaration>{","<LocalVariable_Declaration>}

<GlobalVariable_Definition> ::= <Type>["*"] IDENTIFIER";"
<GlobalArray_Definition> ::= <Type>IDENTIFIER"["CONSTANT_INT"]" ";"

<LocalVariable_Definition> ::= <LocalVariable_Declaration>["="<Expression>]";"
<LocalVariable_Declaration> ::= <Type>["*"] IDENTIFIER




# Statement
<Statement> ::= <Compound_Statement> | <LocalVariable_Definition> | <If_Statement> | <Iteration_Statement> | 
              | <Return_Statement> | <Expression_Statement>

<Compound_Statement> ::= "{"{<Statement>}"}"

<If_Statement> ::= IF"("<Expression>")"<Statement>[ELSE<Statement>]

<Iteration_Statement> ::= <While_Statement> | <DoWhile_Statement>
<While_Statement> ::= WHILE"("<Expression>")"<Statement>
<DoWhile_Statement> ::= DO<Statement>WHILE"("<Expression>")"";"

<Return_Statement> ::= RETURN [<Expression>] ";"

<Expression_Statement> ::= [<Expression>]";"


# Expression
<Expression> ::= <Assignment_Expression>{","<Assignment_Expression>}
<Assignment_Expression> ::= [(["*"]IDENTIFIER) | (IDENTIFIER"["<Expression>"]") "="]<LogicOr_Expression>

<LogicOr_Expression> ::= <LogicAnd_Expression>{"||"<LogicAnd_Expression>}
<LogicAnd_Expression> ::= <Or_Expression>{"&&"<Or_Expression>}

<Or_Expression> ::= <Xor_Expression>{"|"<Xor_Expression>}
<Xor_Expression> ::= <And_Expression>{"^"<And_Expression>}
<And_Expression> ::= <Equality_Expression>{"&"<Equality_Expression>}

<Equality_Expression> ::= <Relational_Expression>{("==" | "!=")<Relational_Expression>}
<Relational_Expression> ::= <Shift_Expression>{("<" | "<=" | ">" | ">=")<Shift_Expression>}

<Shift_Expression> ::= <PlusMinus_Expression>{("<<" | ">>")<PlusMinus_Expression>}

<PlusMinus_Expression> ::= <MulDiv_Expression>{("+" | "-")<MulDiv_Expression>}
<MulDiv_Expression> ::= <Unary_Expression>{("*" | "/" | "%")<Unary_Expression>}

<Unary_Expression> ::= ["-" | "~" | "!"]<Primary_Expression> 
<Primary_Expression> ::= <FunctionCall_Expression> | <Address_Expression> | <Dreference_Expression> | <Array_Expression> |
                        | <IncDecPrefix_Expression> | <IncDecPostfix_Expression> | "("<Expression>")" |  
                        | CONSTANT_INT | CONSTANT_CHAR | CONSTANT_STRING | IDENTIFIER  

<FunctionCall_Expression> ::= IDENTIFIER"("[<Expression>]")"

<Address_Expression> ::="&"IDENTIFIER [("+ "| "-") CONSTANT_INT]
<Dreference_Expression> ::="*" ( IDENTIFIER | "(" IDENTIFIER [("+" | "-") CONSTANT_INT] ")" )
<Array_Expression> ::= IDENTIFIER"[" <Expression> "]"

<IncDecPrefix_Expression> ::= ("++" | "--")IDENTIFIER
<IncDecPostfix_Expression> ::= IDENTIFIER("++" | "--")